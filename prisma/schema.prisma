// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Represents account settings
// This entity is designed to store account information with only one record
model AccountEntity {
  id       String @id @default("default")
  username String @unique
  password String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("account")
}

enum RedirectType {
  BOOK
  DOC
  PAGE
  NONE
}

// Represents site settings
// This entity is designed to store site information with only one record
model SiteSettingsEntity {
  id                   String       @id @default("default")
  title                String?
  description          String?
  logo                 String?
  darkLogo             String?      @map("dark_logo")
  copyright            String?
  gaId                 String?      @map("ga_id")
  homePageRedirectType RedirectType @default(NONE) @map("home_page_redirect_type")
  redirectToBook       BookEntity?  @relation(fields: [redirectToBookId], references: [id])
  redirectToBookId     Int?         @map("redirect_to_book_id")
  redirectToDoc        DocEntity?   @relation(fields: [redirectToDocId], references: [id])
  redirectToDocId      Int?         @map("redirect_to_doc_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("site_settings")
}

// Represents a file in the system
model FileEntity {
  id        Int      @id @default(autoincrement())
  url       String
  hash      String   @unique
  width     Int
  height    Int
  mimeType  String   @map("mime_type")
  size      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("files")
}

enum BookType {
  BLOGS
  DOCS
  PAGES
  NAVBAR
}

// Represents a book in the system
model BookEntity {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique @default(cuid())
  type        BookType @default(BLOGS)
  isPublished Boolean  @default(false) @map("is_published")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  docs         DocEntity[]
  treeNodes    TreeNodeEntity[]
  siteSettings SiteSettingsEntity[]

  @@map("books")
}

// Represents a doc in the system
model DocEntity {
  id          Int     @id @default(autoincrement())
  title       String
  slug        String  @default(cuid())
  content     Json?
  cover       String?
  summary     String?
  viewCount   Int     @default(0) @map("view_count")
  isPublished Boolean @default(false) @map("is_published")
  isDeleted   Boolean @default(false) @map("is_deleted")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  publishedAt DateTime @default(now()) @map("published_at")

  bookId       Int                  @map("book_id")
  book         BookEntity           @relation(fields: [bookId], references: [id])
  treeNode     TreeNodeEntity?
  siteSettings SiteSettingsEntity[]

  @@map("docs")
}

// Represents the type of a tree node
enum TreeNodeType {
  DOC
  GROUP
  LINK
}

// Represents a tree node
model TreeNodeEntity {
  id          Int          @id @default(autoincrement())
  parentId    Int?         @map("parent_id")
  prevId      Int?         @map("prev_id")
  siblingId   Int?         @map("sibling_id")
  childId     Int?         @map("child_id")
  type        TreeNodeType
  title       String
  url         String?
  isPublished Boolean      @default(false) @map("is_published")
  isExternal  Boolean      @default(false) @map("is_external")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  bookId Int        @map("book_id")
  book   BookEntity @relation(fields: [bookId], references: [id])
  docId  Int?       @unique @map("doc_id")
  doc    DocEntity? @relation(fields: [docId], references: [id])

  @@map("tree_nodes")
}
