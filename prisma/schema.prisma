// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents account settings
// This entity is designed to store account information with only one record
model AccountEntity {
  id       String @id @default("default")
  username String @unique
  password String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("account")
}

enum IndexPageType {
  DOC
  CARD
}

// Represents site settings 
// This entity is designed to store site information with only one record
model SiteSettingsEntity {
  id          String  @id @default("default")
  title       String?
  description String?
  logo        String?
  darkLogo    String? @map("dark_logo")
  copyright   String?
  gaId        String? @map("ga_id")

  indexPageType    IndexPageType @default(CARD) @map("index_page_type")
  indexTitle       String?       @map("index_title")
  indexDescription String?       @map("index_description")
  mainActionText   String?       @map("main_action_text")
  mainActionUrl    String?       @map("main_action_url")
  isMainNewTab     Boolean       @default(false) @map("is_main_new_tab")
  subActionText    String?       @map("sub_action_text")
  subActionUrl     String?       @map("sub_action_url")
  isSubNewTab      Boolean       @default(false) @map("is_sub_new_tab")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("site_settings")
}

// Represents a file in the system
model FileEntity {
  id        Int      @id @default(autoincrement())
  url       String
  hash      String   @unique
  width     Int
  height    Int
  mimeType  String   @map("mime_type")
  size      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("files")
}

// Represents a book in the system
model BookEntity {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique @default(cuid())

  indexPageType    IndexPageType @default(CARD) @map("index_page_type")
  indexTitle       String?       @map("index_title")
  indexDescription String?       @map("index_description")
  mainActionText   String?       @map("main_action_text")
  mainActionUrl    String?       @map("main_action_url")
  isMainNewTab     Boolean       @default(false) @map("is_main_new_tab")
  subActionText    String?       @map("sub_action_text")
  subActionUrl     String?       @map("sub_action_url")
  isSubNewTab      Boolean       @default(false) @map("is_sub_new_tab")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  CatalogNodeEntity CatalogNodeEntity[]
  DocEntity         DocEntity[]

  @@map("books")
}

// Represents the type of a catalog node
enum CatalogNodeType {
  STACK
  DOC
}

// Represents a catalog node of a book
model CatalogNodeEntity {
  id        Int             @id @default(autoincrement())
  parentId  Int?            @map("parent_id")
  prevId    Int?            @map("prev_id")
  siblingId Int?            @map("sibling_id")
  childId   Int?            @map("child_id")
  title     String
  type      CatalogNodeType
  url       String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  bookId    Int        @map("book_id")
  book      BookEntity @relation(fields: [bookId], references: [id])
  docId     Int?       @unique @map("doc_id")
  DocEntity DocEntity? @relation(fields: [docId], references: [id])

  @@map("catalog_nodes")
}

// Represents a document in the system
model DocEntity {
  id           Int    @id @default(autoincrement())
  title        String
  slug         String @default(cuid())
  draftContent Json?  @map("draft_content")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  bookId      Int                @map("book_id")
  book        BookEntity         @relation(fields: [bookId], references: [id])
  catalogNode CatalogNodeEntity?

  @@map("docs")
}
